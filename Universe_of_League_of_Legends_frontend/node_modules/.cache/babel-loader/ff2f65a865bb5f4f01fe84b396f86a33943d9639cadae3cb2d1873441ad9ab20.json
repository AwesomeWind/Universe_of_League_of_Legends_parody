{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**axios封装\r\n * 请求拦截、相应拦截、错误统一处理\r\n */\nimport axios from 'axios';\naxios.defaults.baseURL = 'http://127.0.0.1:8089';\naxios.defaults.headers['Content-Type'] = 'application/x-www-form0urlencoded;charset=UTF-8';\naxios.interceptors.request.use(\n//响应拦截\nasync config => {\n  // 每次发送请求之前判断vuex中是否存在token\n  // 如果存在，则统一在http请求的header都加上token，这样后台根据token判断你的登录情况\n  // 即使本地存在token，也有可能token是过期的，所以在响应拦截器中要对返回状态进行判断\n  config.headers.token = sessionStorage.getItem('token');\n  return config;\n}, error => {\n  return Promise.error(error);\n});\n// 响应拦截器\naxios.interceptors.response.use(response => {\n  if (response.status === 200) {\n    return Promise.resolve(response); //进行中\n  } else {\n    return Promise.reject(response); //失败\n  }\n},\n// 服务器状态码不是200的情况\nerror => {\n  if (error.response.status) {\n    switch (error.response.status) {\n      // 401: 未登录\n      // 未登录则跳转登录页面，并携带当前页面的路径\n      // 在登录成功后返回当前页面，这一步需要在登录页操作。\n      case 401:\n        break;\n      // 403 token过期\n      // 登录过期对用户进行提示\n      // 清除本地token和清空vuex中token对象\n      // 跳转登录页面\n      case 403:\n        sessionStorage.clear();\n        router.push('/login');\n        break;\n      // 404请求不存在\n      case 404:\n        break;\n      // 其他错误，直接抛出错误提示\n      default:\n    }\n    return Promise.reject(error.response);\n  }\n});\nconst $get = (url, params) => {\n  return new Promise((resolve, reject) => {\n    axios.get(url, {\n      params: params\n    }).then(res => {\n      resolve(res.data);\n    }).catch(err => {\n      reject(err.data);\n    });\n  });\n};\n/**\r\n * post方法，对应post请求\r\n * @param {String} url [请求的url地址]\r\n * @param {Object} params [请求时携带的参数]\r\n */\n\nconst $post = (url, params) => {\n  return new Promise((resolve, reject) => {\n    axios.post(url, params) //是将对象 序列化成URL的形式，以&进行拼接\n    .then(res => {\n      resolve(res.data);\n    }).catch(err => {\n      reject(err.data);\n    });\n  });\n};\n//下面是vue3必须加的，vue2不需要，只需要暴露出去get，post方法就可以\n\nexport const get = $get;\nexport const post = $post;\nexport const axios1 = axios;\n\n/*\r\nexport default {\r\n    install: (app) => {\r\n        app.config.globalProperties['$get'] = $get;\r\n        app.config.globalProperties['$post'] = $post;\r\n        app.config.globalProperties['$axios'] = axios;\r\n    }\r\n}\r\n*/","map":{"version":3,"names":["axios","defaults","baseURL","headers","interceptors","request","use","config","token","sessionStorage","getItem","error","Promise","response","status","resolve","reject","clear","router","push","$get","url","params","get","then","res","data","catch","err","$post","post","axios1"],"sources":["D:/MyCode/Universe_of_League_of_Legends_parody/Universe_of_League_of_Legends_frontend/src/request/request.js"],"sourcesContent":["/**axios封装\r\n * 请求拦截、相应拦截、错误统一处理\r\n */\r\nimport axios from 'axios';\r\n\r\naxios.defaults.baseURL = 'http://127.0.0.1:8089'\r\naxios.defaults.headers['Content-Type'] = 'application/x-www-form0urlencoded;charset=UTF-8'\r\naxios.interceptors.request.use( //响应拦截\r\n    async config => {\r\n        // 每次发送请求之前判断vuex中是否存在token\r\n        // 如果存在，则统一在http请求的header都加上token，这样后台根据token判断你的登录情况\r\n        // 即使本地存在token，也有可能token是过期的，所以在响应拦截器中要对返回状态进行判断\r\n        config.headers.token = sessionStorage.getItem('token')\r\n        return config;\r\n    },\r\n    error => {\r\n        return Promise.error(error);\r\n    })\r\n// 响应拦截器\r\naxios.interceptors.response.use(\r\n    response => {\r\n        if (response.status === 200) {\r\n            return Promise.resolve(response); //进行中\r\n        } else {\r\n            return Promise.reject(response); //失败\r\n        }\r\n    },\r\n    // 服务器状态码不是200的情况\r\n    error => {\r\n        if (error.response.status) {\r\n            switch (error.response.status) {\r\n                // 401: 未登录\r\n                // 未登录则跳转登录页面，并携带当前页面的路径\r\n                // 在登录成功后返回当前页面，这一步需要在登录页操作。\r\n                case 401:\r\n                    break\r\n                // 403 token过期\r\n                // 登录过期对用户进行提示\r\n                // 清除本地token和清空vuex中token对象\r\n                // 跳转登录页面\r\n                case 403:\r\n                    sessionStorage.clear()\r\n                    router.push('/login')\r\n                    break\r\n                // 404请求不存在\r\n                case 404:\r\n                    break;\r\n                // 其他错误，直接抛出错误提示\r\n                default:\r\n            }\r\n            return Promise.reject(error.response);\r\n        }\r\n    }\r\n);\r\n\r\nconst $get = (url, params) => {\r\n    return new Promise((resolve, reject) => {\r\n        axios.get(url, {\r\n            params: params,\r\n        })\r\n            .then(res => {\r\n                resolve(res.data);\r\n            })\r\n            .catch(err => {\r\n                reject(err.data)\r\n            })\r\n    });\r\n}\r\n/**\r\n * post方法，对应post请求\r\n * @param {String} url [请求的url地址]\r\n * @param {Object} params [请求时携带的参数]\r\n */\r\n\r\nconst $post = (url, params) => {\r\n    return new Promise((resolve, reject) => {\r\n        axios.post(url, params) //是将对象 序列化成URL的形式，以&进行拼接\r\n            .then(res => {\r\n                resolve(res.data);\r\n            })\r\n            .catch(err => {\r\n                reject(err.data)\r\n            })\r\n    });\r\n}\r\n//下面是vue3必须加的，vue2不需要，只需要暴露出去get，post方法就可以\r\n\r\nexport const get = $get\r\nexport const post = $post\r\nexport const axios1 = axios\r\n\r\n/*\r\nexport default {\r\n    install: (app) => {\r\n        app.config.globalProperties['$get'] = $get;\r\n        app.config.globalProperties['$post'] = $post;\r\n        app.config.globalProperties['$axios'] = axios;\r\n    }\r\n}\r\n*/\r\n"],"mappings":";AAAA;AACA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzBA,KAAK,CAACC,QAAQ,CAACC,OAAO,GAAG,uBAAuB;AAChDF,KAAK,CAACC,QAAQ,CAACE,OAAO,CAAC,cAAc,CAAC,GAAG,iDAAiD;AAC1FH,KAAK,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG;AAAE;AAC5B,MAAMC,MAAM,IAAI;EACZ;EACA;EACA;EACAA,MAAM,CAACJ,OAAO,CAACK,KAAK,GAAGC,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC;EACtD,OAAOH,MAAM;AACjB,CAAC,EACDI,KAAK,IAAI;EACL,OAAOC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;AAC/B,CAAC,CAAC;AACN;AACAX,KAAK,CAACI,YAAY,CAACS,QAAQ,CAACP,GAAG,CAC3BO,QAAQ,IAAI;EACR,IAAIA,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IACzB,OAAOF,OAAO,CAACG,OAAO,CAACF,QAAQ,CAAC,CAAC,CAAC;EACtC,CAAC,MAAM;IACH,OAAOD,OAAO,CAACI,MAAM,CAACH,QAAQ,CAAC,CAAC,CAAC;EACrC;AACJ,CAAC;AACD;AACAF,KAAK,IAAI;EACL,IAAIA,KAAK,CAACE,QAAQ,CAACC,MAAM,EAAE;IACvB,QAAQH,KAAK,CAACE,QAAQ,CAACC,MAAM;MACzB;MACA;MACA;MACA,KAAK,GAAG;QACJ;MACJ;MACA;MACA;MACA;MACA,KAAK,GAAG;QACJL,cAAc,CAACQ,KAAK,CAAC,CAAC;QACtBC,MAAM,CAACC,IAAI,CAAC,QAAQ,CAAC;QACrB;MACJ;MACA,KAAK,GAAG;QACJ;MACJ;MACA;IACJ;IACA,OAAOP,OAAO,CAACI,MAAM,CAACL,KAAK,CAACE,QAAQ,CAAC;EACzC;AACJ,CACJ,CAAC;AAED,MAAMO,IAAI,GAAGA,CAACC,GAAG,EAAEC,MAAM,KAAK;EAC1B,OAAO,IAAIV,OAAO,CAAC,CAACG,OAAO,EAAEC,MAAM,KAAK;IACpChB,KAAK,CAACuB,GAAG,CAACF,GAAG,EAAE;MACXC,MAAM,EAAEA;IACZ,CAAC,CAAC,CACGE,IAAI,CAACC,GAAG,IAAI;MACTV,OAAO,CAACU,GAAG,CAACC,IAAI,CAAC;IACrB,CAAC,CAAC,CACDC,KAAK,CAACC,GAAG,IAAI;MACVZ,MAAM,CAACY,GAAG,CAACF,IAAI,CAAC;IACpB,CAAC,CAAC;EACV,CAAC,CAAC;AACN,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA,MAAMG,KAAK,GAAGA,CAACR,GAAG,EAAEC,MAAM,KAAK;EAC3B,OAAO,IAAIV,OAAO,CAAC,CAACG,OAAO,EAAEC,MAAM,KAAK;IACpChB,KAAK,CAAC8B,IAAI,CAACT,GAAG,EAAEC,MAAM,CAAC,CAAC;IAAA,CACnBE,IAAI,CAACC,GAAG,IAAI;MACTV,OAAO,CAACU,GAAG,CAACC,IAAI,CAAC;IACrB,CAAC,CAAC,CACDC,KAAK,CAACC,GAAG,IAAI;MACVZ,MAAM,CAACY,GAAG,CAACF,IAAI,CAAC;IACpB,CAAC,CAAC;EACV,CAAC,CAAC;AACN,CAAC;AACD;;AAEA,OAAO,MAAMH,GAAG,GAAGH,IAAI;AACvB,OAAO,MAAMU,IAAI,GAAGD,KAAK;AACzB,OAAO,MAAME,MAAM,GAAG/B,KAAK;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}